name: Build

on: [push]

permissions:
  contents: write

env:
  RUST_TOOLCHAIN: 1.86.0

jobs:
  wasm:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Emscripten SDK
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.43

      - name: Setup Rust (WASM32 Emscripten)
        uses: dtolnay/rust-toolchain@master
        with:
          target: wasm32-unknown-emscripten
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: true

      - name: Build
        run: ./build.sh -er # release mode, skip emsdk

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist/"
          retention-days: 7

      - name: Deploy
        uses: actions/deploy-pages@v4

  linux:
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain (Linux)
        uses: dtolnay/rust-toolchain@master
        with:
          target: ${{ env.TARGET }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Vcpkg
        run: |
          cargo install cargo-vcpkg
          cargo vcpkg -v build

      - name: Build
        run: cargo build --release

      - name: Install Cargo Binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Acquire Package Version
        run: |
          cargo binstall toml-cli -y
          PACKAGE_VERSION=$(toml get ./Cargo.toml package.version --raw)
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "pacman-${{ env.PACKAGE_VERSION }}-${{ env.TARGET }}"
          path: ./target/release/pacman
          retention-days: 7
          if-no-files-found: error

  macos:
    runs-on: macos-13
    env:
      TARGET: x86_64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain (MacOS)
        uses: dtolnay/rust-toolchain@master
        with:
          target: ${{ env.TARGET }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Vcpkg
        run: |
          cargo install cargo-vcpkg
          cargo vcpkg build

      - name: Build
        run: cargo build --release

      - name: Install Cargo Binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Acquire Package Version
        run: |
          cargo binstall toml-cli -y
          PACKAGE_VERSION=$(toml get ./Cargo.toml package.version --raw)
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "pacman-${{ env.PACKAGE_VERSION }}-${{ env.TARGET }}"
          path: ./target/release/pacman
          retention-days: 7
          if-no-files-found: error

  windows:
    env:
      TARGET: x86_64-pc-windows-gnu
      SDL2: 2.30.2
      SDL2_TTF: 2.22.0
      SDL2_MIXER: 2.8.0
      SDL2_IMAGE: 2.8.2
      # SDL2_GFX: 1.0.4
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust (Windows)
        uses: dtolnay/rust-toolchain@master
        with:
          target: ${{ env.TARGET }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Vcpkg
        run: |
          cargo install cargo-vcpkg
          cargo vcpkg build

      - name: Build
        run: cargo build --release

      - name: Install Cargo Binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Acquire Package Version
        run: |
          cargo binstall toml-cli -y
          PACKAGE_VERSION=$(toml get ./Cargo.toml package.version --raw)
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $env:GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "pacman-${{ env.PACKAGE_VERSION }}-${{ env.TARGET }}"
          path: ./target/release/pacman.exe
          retention-days: 7
          if-no-files-found: error
